{
    "collab_server" : "",
    "contents" : "# Coursera Data Science Specialization\n# Reproducible Research\n# Course Project 2\n# Author: John James\n# Date: March 7, 2016\n# master.R\n\n\n#############################################################################\n##                            ENVIRONMENT                                  ##\n#############################################################################\n## ---- environment\n\n# Processes to run\n  load    <- TRUE\n  review  <- TRUE\n  process <- TRUE\n  analyze <- TRUE\n  present <- TRUE\n \n# Raw Data File Parameters\n  dataUrl <- \"https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2\"   # Link to data source\n  dataZipFile     <- \"stormData.zip\"    # Name of zip file (get this from the data source code book)\n  dataCsvFile     <- \"stormData.csv\"    # Name of csv file (get this from the data source code book)\n  dataFrame       <- \"stormData\"        # Name of data frame that will contain the storm data\n\n# Directories\n  dataRawDir  <- \"Data/Raw Data/\"       # Directory for raw data    \n  dataProcDir <- \"Data/Processed Data/\" # Directory for processed data\n  codeDir     <- \"Code/\"                # Directory for code\n  figDir      <- \"Figure/\"              # Directory for Figures\n\n# Load custom functions files\nsource(file=paste(codeDir, \"load.R\", sep=\"\"))\nsource(file=paste(codeDir, \"review.R\", sep=\"\"))\nsource(file=paste(codeDir, \"process.R\", sep=\"\"))\nsource(file=paste(codeDir, \"analyze.R\", sep=\"\"))\nsource(file=paste(codeDir, \"present.R\", sep=\"\"))\n  \n# Include requisite libraries\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(gridExtra)\nlibrary(downloader)\n\n## ---- end environment\n\n#############################################################################\n##                                LOAD DATA                                ##\n#############################################################################\n## ---- loadDataCall\n\n    if (load) {\n    stormData <- loadData(dataUrl, dataRawDir, dataZipFile, dataCsvFile, dataFrame)\n\n}\n## ---- end\n  \n  \n  \n#############################################################################\n##                              REVIEW DATA                                ##\n#############################################################################\n## ---- reviewData\n  if (review) {\n\n  # Call review data function  \n  dataReport <- reviewData(stormData)\n\n  # Ascertain dimensions of dataset\n  observations  <- dataReport[[1]][1]\n  variables     <- dataReport[[1]][2]\n\n  # Determine number of unique event types\n  numEventTypes <- dataReport[[2]][1]\n\n  # Obtain number of zero rows\n  zeroRows <- dataReport[[3]][1]\n\n}  \n## ---- end\n  \n  \n#############################################################################\n##                              PROCESS DATA                               ##\n#############################################################################\n\n  if (process) {\n    \n## ---- removeZeroRows \n    stormData <- stormData[ which(stormData$FATALITIES != 0 | stormData$INJURIES != 0 | stormData$PROPDMG != 0 | stormData$CROPDMG != 0),]\n## ---- end\n    \n## ---- extractVariables\n    stormData <- select(stormData, BGN_DATE, EVTYPE, FATALITIES, INJURIES, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP)\n## ---- end\n    \n## ---- processEventTypeCall\n    stormData <- processEventType(stormData)\n## ---- end\n    \n## ---- processDamageCall\n    stormData <- processDamage(stormData)\n## ---- end\n    \n## ---- processYearCall\n    stormData <- processYear(stormData)\n## ---- end\n      \n}\n# ---- endProcess  \n\n\n\n#############################################################################\n##                              ANALYZE DATA                               ##\n#############################################################################\n  if (analyze) {\n\n## ---- top5AllData\n    top5Fatalities  <- top5FatalitiesFunc(stormData)\n    top5Injuries    <- top5InjuriesFunc(stormData)\n    top5Health      <- top5HealthFunc(stormData)\n    top5CropDmg     <- top5CropDmgFunc(stormData)\n    top5PropDmg     <- top5PropDmgFunc(stormData)\n    top5TotalDmg    <- top5TotalDmgFunc(stormData)\n## ---- end\n    \n## ---- extract1990Data\n    stormData1990 <- stormData[ which(stormData$YEAR >= \"1990\"),]\n## ---- end\n    \n## ---- top51990\n    top5Fatalities1990  <- top5FatalitiesFunc(stormData1990)\n    top5Injuries1990    <- top5InjuriesFunc(stormData1990)\n    top5Health1990      <- top5HealthFunc(stormData1990)\n    top5CropDmg1990     <- top5CropDmgFunc(stormData1990)\n    top5PropDmg1990     <- top5PropDmgFunc(stormData1990)\n    top5TotalDmg1990    <- top5TotalDmgFunc(stormData1990)\n## ---- end\n  \n## ---- timeSeriesData\n    fatalitiesByYear  <- stormData %>%  group_by(YEAR,EVTYPE) %>% summarise(FATALITIES = sum(FATALITIES))\n    fatalitiesByYear  <- fatalitiesByYear[ which(fatalitiesByYear$EVTYPE %in% top5Fatalities$EVTYPE), ]\n    \n    injuriesByYear    <- stormData %>%  group_by(YEAR,EVTYPE) %>% summarise(INJURIES = sum(INJURIES))\n    injuriesByYear    <- injuriesByYear[ which(injuriesByYear$EVTYPE %in% top5Injuries$EVTYPE), ]\n    \n    healthIncidentsByYear    <- stormData %>%  group_by(YEAR,EVTYPE) %>% summarise(TOTALHEALTH = sum(TOTALHEALTH))\n    healthIncidentsByYear    <- healthIncidentsByYear[ which(healthIncidentsByYear$EVTYPE %in% top5Health$EVTYPE), ]\n    \n    cropDmgByYear   <- stormData %>%  group_by(YEAR,EVTYPE) %>% summarise(CROPDMG = sum(CROPDMG))\n    cropDmgByYear   <- cropDmgByYear[ which(cropDmgByYear$EVTYPE %in% top5CropDmg$EVTYPE), ]\n    \n    propDmgByYear   <- stormData %>%  group_by(YEAR,EVTYPE) %>% summarise(PROPDMG = sum(PROPDMG))\n    propDmgByYear   <- propDmgByYear[ which(propDmgByYear$EVTYPE %in% top5PropDmg$EVTYPE), ]\n\n    totalDmgByYear  <- stormData %>%  group_by(YEAR,EVTYPE) %>% summarise(TOTALDMG = sum(TOTALDMG))\n    totalDmgByYear  <- totalDmgByYear[ which(totalDmgByYear$EVTYPE %in% top5TotalDmg$EVTYPE), ]\n## ---- end\n    \n}\n\n\n#############################################################################\n##                              PRESENT DATA                               ##\n#############################################################################\n\n  if (present) {\n\n## ---- top5BarPlotsAll\n    b1 <- barPlotFatalities(top5Fatalities)\n    b2 <- barPlotInjuries(top5Injuries)\n    b3 <- barPlotHealthIncidents(top5Health)\n    b4 <- barPlotPropertyDamage(top5PropDmg)\n    b5 <- barPlotCropDamage(top5CropDmg)\n    b6 <- barPlotTotalDamage(top5TotalDmg)\n    \n    grid.arrange(b1, b2, b3, b4, b5, b6, ncol=2, nrow=3)    \n## ---- end\n    \n## ---- top5BarPlots1990\n    b1 <- barPlotFatalities(top5Fatalities1990)\n    b2 <- barPlotInjuries(top5Injuries1990)\n    b3 <- barPlotHealthIncidents(top5Health1990)\n    b4 <- barPlotPropertyDamage(top5PropDmg1990)\n    b5 <- barPlotCropDamage(top5CropDmg1990)\n    b6 <- barPlotTotalDamage(top5TotalDmg1990)\n    \n    grid.arrange(b1, b2, b3, b4, b5, b6, ncol=2, nrow=3)    \n## ---- end    \n\n## ---- trendLine\n    t1 <- trendFatalities(fatalitiesByYear)\n    t2 <- trendInjuries(injuriesByYear)\n    t3 <- trendHealth(healthIncidentsByYear)\n    t4 <- trendPropDmg(propDmgByYear)\n    t5 <- trendCropDmg(cropDmgByYear)\n    t6 <- trendTotalDmg(totalDmgByYear)\n\n    grid.arrange(t1, t2, t3, t4, t5, t6, ncol=2, nrow=3)    \n## ---- end\n    \n}\n",
    "created" : 1458245705526.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4048595324",
    "id" : "531DA242",
    "lastKnownWriteTime" : 1458293111,
    "last_content_update" : 1458293111772,
    "path" : "~/GitHub/RepResearch_Course_Project_2/Code/master.R",
    "project_path" : "Code/master.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}